)
)
# for (kk in seq(K)) {
#   fig <- fig %>%
#       plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
#                   color = kk, size = 120, frame = ~time)%>%
#     plotly::layout(updatemenus = updatemenus)
}
}
for (kk in seq(K)) {
fig <- fig %>%
plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
color = kk, size = 120, frame = ~time)%>%
if (show_data == TRUE){
plotly::layout(updatemenus = updatemenus)
}
fig <- fig %>%
plotly::layout(scene = list(
xaxis = list(title = x_label, range = c(1.1* min_val_time[[1]], 1.1 *max_val_time[[1]])),
yaxis = list(title = y_label, range = c(1.1* min_val_time[[2]], 1.1 *max_val_time[[2]])),
zaxis = list(title = z_label, range = c(1.1* min_val_time[[3]], 1.1 *max_val_time[[3]])),
aspectmode = "manual",  # Set aspect ratio to manual
aspectratio = list(x = 1, y = 1, z = 1)  # Specify the fixed aspect ratio
))
return(fig)
}
}
plot_data_and_model(ex2$dat$y, ex2$dat$z, ex2$dat$mu, show_data = FALSE)
#' @param z a length T list with `z[[t]]` being a n_t vector of cluster assignments
#' @param mu a T-by-K-by-d array of means
#' @export
plot_data_and_model <- function(y, z, mu, show_data = TRUE) {
d <- ncol(y[[1]])
K <- ncol(mu)
ntimes = length(z)
if (d == 1){
y_label <- ifelse(is.null(colnames(y[[1]])), "V1", colnames(y[[1]]))
dat_df <- purrr::map2_dfr(z, y, ~ tibble::tibble(z = as.factor(.x), y = .y),
.id = "time") %>%
dplyr::mutate(time = as.numeric(.data$time))
means_df <- tibble::as_tibble(mu[, , 1]) %>%
dplyr::mutate(time = dplyr::row_number()) %>%
tidyr::pivot_longer(-.data$time, names_to = "cluster", values_to = "mean")
fig <- ggplot2::ggplot() +
ggplot2::geom_point(
data = dat_df,
ggplot2::aes(x = .data$time, y = .data$y, color = .data$z), alpha = 0.2
) +
ggplot2::geom_line(
data = means_df,
ggplot2::aes(x = .data$time, y = .data$mean, group = .data$cluster)
) +
ggplot2::labs(x = "Time", y = y_label, title = "Data and Model")  # Label the x-axis and y-axis and plot
}
else if (d == 3) {
K <- ncol(mu)
d <- ncol(y[[1]])
z_dat <- unlist(z)
# Determine axis labels
if (is.null(colnames(y[[1]]))) {
x_label <- "V1"
y_label <- "V2"
z_label <- "V3"
} else {
x_label <- colnames(y[[1]])[1]
y_label <- colnames(y[[1]])[2]
z_label <- colnames(y[[1]])[3]
}
ntimes = length(z)
max_val <- list()
max_val_time <- list()
min_val = list()
min_val_time = list()
for (dd in seq(d)) {
max_val[[dd]] <- sapply(y, function(mat) max(mat[, dd]))
max_val_time[[dd]] <- max(max_val[[dd]])
min_val[[dd]] <- sapply(y, function(mat) min(mat[, dd]))
min_val_time[[dd]] <- min(min_val[[dd]])
}
y = unname(y)
y <- y %>%
purrr::map_dfr(~ tibble::tibble(x = .x[, 1], y = .x[, 2], z = .x[, 3]), .id = "time") %>%
dplyr::mutate(z1 = z_dat)
y$time = as.integer(y$time)
cluster_data_frames <- vector("list", length = K)
for (kk in seq(K)) {
cluster_mean <- mu[, kk, ]
data <- data.frame(
X1 = cluster_mean [, 1],
X2 = cluster_mean [, 2],
X3 = cluster_mean [, 3],
time = 1:ntimes
)
cluster_data_frames[[kk]] = data
}
if (show_data == FALSE){
fig <- plotly::plot_ly(colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Model Means')
# for (kk in seq(K)) {
#   fig <- fig %>%
#     plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
#                 color = kk, size = 120, frame = ~time)
# }
} else {
fig <- y %>% plotly::plot_ly(
x = ~x, y = ~y, z = ~z, color = ~z1,
type = "scatter3d", frame = ~time, mode = "markers", size = 80,
colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Data and Model')
updatemenus <- list(
list(
active = 0,
type= 'buttons',
buttons = list(
list(
label = "Data Points",
method = "update",
args = list(list(visible = c(TRUE, rep(c(TRUE, TRUE), K))))),
list(
label = "No Data Points",
method = "update",
args = list(list(visible = c(FALSE, rep(c(TRUE, TRUE), K))))))
)
)
# for (kk in seq(K)) {
#   fig <- fig %>%
#       plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
#                   color = kk, size = 120, frame = ~time)%>%
#     plotly::layout(updatemenus = updatemenus)
}
for (kk in seq(K)) {
fig <- fig %>%
plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
color = kk, size = 120, frame = ~time)%>%
if (show_data == TRUE){
plotly::layout(updatemenus = updatemenus)
}
}
fig <- fig %>%
plotly::layout(scene = list(
xaxis = list(title = x_label, range = c(1.1* min_val_time[[1]], 1.1 *max_val_time[[1]])),
yaxis = list(title = y_label, range = c(1.1* min_val_time[[2]], 1.1 *max_val_time[[2]])),
zaxis = list(title = z_label, range = c(1.1* min_val_time[[3]], 1.1 *max_val_time[[3]])),
aspectmode = "manual",  # Set aspect ratio to manual
aspectratio = list(x = 1, y = 1, z = 1)  # Specify the fixed aspect ratio
))
return(fig)
}
}
plot_data_and_model(ex2$dat$y, ex2$dat$z, ex2$dat$mu, show_data = FALSE)
#' @param z a length T list with `z[[t]]` being a n_t vector of cluster assignments
#' @param mu a T-by-K-by-d array of means
#' @export
plot_data_and_model <- function(y, z, mu, show_data = TRUE) {
d <- ncol(y[[1]])
K <- ncol(mu)
ntimes = length(z)
if (d == 1){
y_label <- ifelse(is.null(colnames(y[[1]])), "V1", colnames(y[[1]]))
dat_df <- purrr::map2_dfr(z, y, ~ tibble::tibble(z = as.factor(.x), y = .y),
.id = "time") %>%
dplyr::mutate(time = as.numeric(.data$time))
means_df <- tibble::as_tibble(mu[, , 1]) %>%
dplyr::mutate(time = dplyr::row_number()) %>%
tidyr::pivot_longer(-.data$time, names_to = "cluster", values_to = "mean")
fig <- ggplot2::ggplot() +
ggplot2::geom_point(
data = dat_df,
ggplot2::aes(x = .data$time, y = .data$y, color = .data$z), alpha = 0.2
) +
ggplot2::geom_line(
data = means_df,
ggplot2::aes(x = .data$time, y = .data$mean, group = .data$cluster)
) +
ggplot2::labs(x = "Time", y = y_label, title = "Data and Model")  # Label the x-axis and y-axis and plot
}
else if (d == 3) {
K <- ncol(mu)
d <- ncol(y[[1]])
z_dat <- unlist(z)
# Determine axis labels
if (is.null(colnames(y[[1]]))) {
x_label <- "V1"
y_label <- "V2"
z_label <- "V3"
} else {
x_label <- colnames(y[[1]])[1]
y_label <- colnames(y[[1]])[2]
z_label <- colnames(y[[1]])[3]
}
ntimes = length(z)
max_val <- list()
max_val_time <- list()
min_val = list()
min_val_time = list()
for (dd in seq(d)) {
max_val[[dd]] <- sapply(y, function(mat) max(mat[, dd]))
max_val_time[[dd]] <- max(max_val[[dd]])
min_val[[dd]] <- sapply(y, function(mat) min(mat[, dd]))
min_val_time[[dd]] <- min(min_val[[dd]])
}
y = unname(y)
y <- y %>%
purrr::map_dfr(~ tibble::tibble(x = .x[, 1], y = .x[, 2], z = .x[, 3]), .id = "time") %>%
dplyr::mutate(z1 = z_dat)
y$time = as.integer(y$time)
cluster_data_frames <- vector("list", length = K)
for (kk in seq(K)) {
cluster_mean <- mu[, kk, ]
data <- data.frame(
X1 = cluster_mean [, 1],
X2 = cluster_mean [, 2],
X3 = cluster_mean [, 3],
time = 1:ntimes
)
cluster_data_frames[[kk]] = data
}
if (show_data == FALSE){
fig <- plotly::plot_ly(colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Model Means')
# for (kk in seq(K)) {
#   fig <- fig %>%
#     plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
#                 color = kk, size = 120, frame = ~time)
# }
} else {
fig <- y %>% plotly::plot_ly(
x = ~x, y = ~y, z = ~z, color = ~z1,
type = "scatter3d", frame = ~time, mode = "markers", size = 80,
colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Data and Model')
updatemenus <- list(
list(
active = 0,
type= 'buttons',
buttons = list(
list(
label = "Data Points",
method = "update",
args = list(list(visible = c(TRUE, rep(c(TRUE, TRUE), K))))),
list(
label = "No Data Points",
method = "update",
args = list(list(visible = c(FALSE, rep(c(TRUE, TRUE), K))))))
)
)
# for (kk in seq(K)) {
#   fig <- fig %>%
#       plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
#                   color = kk, size = 120, frame = ~time)%>%
#     plotly::layout(updatemenus = updatemenus)
}
for (kk in seq(K)) {
fig <- fig %>%
plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
color = kk, size = 120, frame = ~time)%>%
if (show_data == TRUE){
plotly::layout(updatemenus = updatemenus)
}
}
fig <- fig %>%
plotly::layout(scene = list(
xaxis = list(title = x_label, range = c(1.1* min_val_time[[1]], 1.1 *max_val_time[[1]])),
yaxis = list(title = y_label, range = c(1.1* min_val_time[[2]], 1.1 *max_val_time[[2]])),
zaxis = list(title = z_label, range = c(1.1* min_val_time[[3]], 1.1 *max_val_time[[3]])),
aspectmode = "manual",  # Set aspect ratio to manual
aspectratio = list(x = 1, y = 1, z = 1)  # Specify the fixed aspect ratio
))
}
return(fig)
}
plot_data_and_model(ex2$dat$y, ex2$dat$z, ex2$dat$mu, show_data = FALSE)
#' @param z a length T list with `z[[t]]` being a n_t vector of cluster assignments
#' @param mu a T-by-K-by-d array of means
#' @export
plot_data_and_model <- function(y, z, mu, show_data = TRUE) {
d <- ncol(y[[1]])
K <- ncol(mu)
ntimes = length(z)
if (d == 1){
y_label <- ifelse(is.null(colnames(y[[1]])), "V1", colnames(y[[1]]))
dat_df <- purrr::map2_dfr(z, y, ~ tibble::tibble(z = as.factor(.x), y = .y),
.id = "time") %>%
dplyr::mutate(time = as.numeric(.data$time))
means_df <- tibble::as_tibble(mu[, , 1]) %>%
dplyr::mutate(time = dplyr::row_number()) %>%
tidyr::pivot_longer(-.data$time, names_to = "cluster", values_to = "mean")
fig <- ggplot2::ggplot() +
ggplot2::geom_point(
data = dat_df,
ggplot2::aes(x = .data$time, y = .data$y, color = .data$z), alpha = 0.2
) +
ggplot2::geom_line(
data = means_df,
ggplot2::aes(x = .data$time, y = .data$mean, group = .data$cluster)
) +
ggplot2::labs(x = "Time", y = y_label, title = "Data and Model")  # Label the x-axis and y-axis and plot
}
else if (d == 3) {
K <- ncol(mu)
d <- ncol(y[[1]])
z_dat <- unlist(z)
# Determine axis labels
if (is.null(colnames(y[[1]]))) {
x_label <- "V1"
y_label <- "V2"
z_label <- "V3"
} else {
x_label <- colnames(y[[1]])[1]
y_label <- colnames(y[[1]])[2]
z_label <- colnames(y[[1]])[3]
}
ntimes = length(z)
max_val <- list()
max_val_time <- list()
min_val = list()
min_val_time = list()
for (dd in seq(d)) {
max_val[[dd]] <- sapply(y, function(mat) max(mat[, dd]))
max_val_time[[dd]] <- max(max_val[[dd]])
min_val[[dd]] <- sapply(y, function(mat) min(mat[, dd]))
min_val_time[[dd]] <- min(min_val[[dd]])
}
y = unname(y)
y <- y %>%
purrr::map_dfr(~ tibble::tibble(x = .x[, 1], y = .x[, 2], z = .x[, 3]), .id = "time") %>%
dplyr::mutate(z1 = z_dat)
y$time = as.integer(y$time)
cluster_data_frames <- vector("list", length = K)
for (kk in seq(K)) {
cluster_mean <- mu[, kk, ]
data <- data.frame(
X1 = cluster_mean [, 1],
X2 = cluster_mean [, 2],
X3 = cluster_mean [, 3],
time = 1:ntimes
)
cluster_data_frames[[kk]] = data
}
if (show_data == FALSE){
fig <- plotly::plot_ly(colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Model Means')
# for (kk in seq(K)) {
#   fig <- fig %>%
#     plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
#                 color = kk, size = 120, frame = ~time)
# }
} else {
fig <- y %>% plotly::plot_ly(
x = ~x, y = ~y, z = ~z, color = ~z1,
type = "scatter3d", frame = ~time, mode = "markers", size = 80,
colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Data and Model')
updatemenus <- list(
list(
active = 0,
type= 'buttons',
buttons = list(
list(
label = "Data Points",
method = "update",
args = list(list(visible = c(TRUE, rep(c(TRUE, TRUE), K))))),
list(
label = "No Data Points",
method = "update",
args = list(list(visible = c(FALSE, rep(c(TRUE, TRUE), K))))))
)
)
# for (kk in seq(K)) {
#   fig <- fig %>%
#       plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
#                   color = kk, size = 120, frame = ~time)%>%
#     plotly::layout(updatemenus = updatemenus)
}
for (kk in seq(K)) {
fig <- fig %>%
plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
color = kk, size = 120, frame = ~time)
if (show_data == TRUE){
fig <- fig %>%
plotly::layout(updatemenus = updatemenus)
}
}
fig <- fig %>%
plotly::layout(scene = list(
xaxis = list(title = x_label, range = c(1.1* min_val_time[[1]], 1.1 *max_val_time[[1]])),
yaxis = list(title = y_label, range = c(1.1* min_val_time[[2]], 1.1 *max_val_time[[2]])),
zaxis = list(title = z_label, range = c(1.1* min_val_time[[3]], 1.1 *max_val_time[[3]])),
aspectmode = "manual",  # Set aspect ratio to manual
aspectratio = list(x = 1, y = 1, z = 1)  # Specify the fixed aspect ratio
))
}
return(fig)
}
plot_data_and_model(ex2$dat$y, ex2$dat$z, ex2$dat$mu, show_data = FALSE)
plot_data_and_model(ex2$dat$y, ex2$dat$z, ex2$dat$mu)
plot_data_and_model(ex1$dat$y, ex1$dat$z, ex1$dat$mu)
#' @param z a length T list with `z[[t]]` being a n_t vector of cluster assignments
#' @param mu a T-by-K-by-d array of means
#' @export
plot_data_and_model <- function(y, z, mu, show_data = TRUE) {
d <- ncol(y[[1]])
K <- ncol(mu)
ntimes = length(z)
if (d == 1){
y_label <- ifelse(is.null(colnames(y[[1]])), "V1", colnames(y[[1]]))
dat_df <- purrr::map2_dfr(z, y, ~ tibble::tibble(z = as.factor(.x), y = .y),
.id = "time") %>%
dplyr::mutate(time = as.numeric(.data$time))
means_df <- tibble::as_tibble(mu[, , 1]) %>%
dplyr::mutate(time = dplyr::row_number()) %>%
tidyr::pivot_longer(-.data$time, names_to = "cluster", values_to = "mean")
fig <- ggplot2::ggplot() +
ggplot2::geom_point(
data = dat_df,
ggplot2::aes(x = .data$time, y = .data$y, color = .data$z), alpha = 0.2
) +
ggplot2::geom_line(
data = means_df,
ggplot2::aes(x = .data$time, y = .data$mean, group = .data$cluster)
) +
ggplot2::labs(x = "Time", y = y_label, title = "Data and Model")  # Label the x-axis and y-axis and plot
}
else if (d == 3) {
K <- ncol(mu)
d <- ncol(y[[1]])
z_dat <- unlist(z)
# Determine axis labels
if (is.null(colnames(y[[1]]))) {
x_label <- "V1"
y_label <- "V2"
z_label <- "V3"
} else {
x_label <- colnames(y[[1]])[1]
y_label <- colnames(y[[1]])[2]
z_label <- colnames(y[[1]])[3]
}
ntimes = length(z)
max_val <- list()
max_val_time <- list()
min_val = list()
min_val_time = list()
for (dd in seq(d)) {
max_val[[dd]] <- sapply(y, function(mat) max(mat[, dd]))
max_val_time[[dd]] <- max(max_val[[dd]])
min_val[[dd]] <- sapply(y, function(mat) min(mat[, dd]))
min_val_time[[dd]] <- min(min_val[[dd]])
}
y = unname(y)
y <- y %>%
purrr::map_dfr(~ tibble::tibble(x = .x[, 1], y = .x[, 2], z = .x[, 3]), .id = "time") %>%
dplyr::mutate(z1 = z_dat)
y$time = as.integer(y$time)
cluster_data_frames <- vector("list", length = K)
for (kk in seq(K)) {
cluster_mean <- mu[, kk, ]
data <- data.frame(
X1 = cluster_mean [, 1],
X2 = cluster_mean [, 2],
X3 = cluster_mean [, 3],
time = 1:ntimes
)
cluster_data_frames[[kk]] = data
}
if (show_data == FALSE){
fig <- plotly::plot_ly(colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Model Means')
} else {
fig <- y %>% plotly::plot_ly(
x = ~x, y = ~y, z = ~z, color = ~z1,
type = "scatter3d", frame = ~time, mode = "markers", size = 80,
colors = colorRamp(c("blue", "orange", "red"))) %>%
plotly::layout(title = 'Data and Model')
updatemenus <- list(
list(
active = 0,
type= 'buttons',
buttons = list(
list(
label = "Data Points",
method = "update",
args = list(list(visible = c(TRUE, rep(c(TRUE, TRUE), K))))),
list(
label = "No Data Points",
method = "update",
args = list(list(visible = c(FALSE, rep(c(TRUE, TRUE), K))))))
)
)
}
for (kk in seq(K)) {
fig <- fig %>%
plotly::add_markers(data = cluster_data_frames[[kk]], x = ~X1, y = ~X2, z = ~X3,
color = kk, size = 120, frame = ~time)
if (show_data == TRUE){
fig <- fig %>%
plotly::layout(updatemenus = updatemenus)
}
}
fig <- fig %>%
plotly::layout(scene = list(
xaxis = list(title = x_label, range = c(1.1* min_val_time[[1]], 1.1 *max_val_time[[1]])),
yaxis = list(title = y_label, range = c(1.1* min_val_time[[2]], 1.1 *max_val_time[[2]])),
zaxis = list(title = z_label, range = c(1.1* min_val_time[[3]], 1.1 *max_val_time[[3]])),
aspectmode = "manual",  # Set aspect ratio to manual
aspectratio = list(x = 1, y = 1, z = 1)  # Specify the fixed aspect ratio
))
}
return(fig)
}
plot_data_and_model(ex1$dat$y, ex1$dat$Z, ex1$dat$mu)
plot_data_and_model(ex2$dat$y, ex2$dat$Z, ex2$dat$mu)
plot_data_and_model(ex1$dat$y, ex1$dat$z, ex1$dat$mu)
