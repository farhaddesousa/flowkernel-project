~ {
# .x is a matrix of size (num_points[i], d)
# .y is the numeric time for that i
# We'll store them as columns in a small tibble
if (is.matrix(.x)) {
tibble::as_tibble(.x, .name_repair = "unique") %>%
dplyr::mutate(time = .y)
} else {
# If univariate, .x is a vector
tibble::tibble(V1 = .x, time = .y)
}
}
)
# Now gather the columns if you have more than 1 dimension
# so you can plot them as e.g. y-values in ggplot. For univariate,
# you can skip gather/pivot.
if (ncol(df) > 2) {
# pivot_longer all the dimension columns except `time`
df <- tidyr::pivot_longer(
df,
cols = -time,
names_to = "dimension",
values_to = "value"
)
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = value, color = dimension)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = paste(y_label, collapse = ", "), title = "Raw Data")
} else {
# Univariate case
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = V1)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = y_label, title = "Raw Data")
}
p
}
# Define parameters
d <- 1
K <- 2
times <- seq(-1, 1, by = 0.1)  # Generate times from -1 to 1 at intervals of 0.1
ntimes <- length(times)
# Define the functions
ex1 <- list(
mu_function = function(times) {
mu <- array(NA, c(length(times), K, d))
mu[, 1, 1] <- times  # Mean for the first cluster is y = x
mu[, 2, 1] <- -times # Mean for the second cluster is y = -x
mu
},
Sigma_function = function(times) {
Sigma <- array(NA, c(length(times), K, 1, 1))
Sigma[, , 1, 1] <- 0.1  # Reduced variance for all clusters
Sigma
},
pi_function = function(times) {
matrix(0.5, nrow = length(times), ncol = 2)  # Constant proportions
},
num_points = rep(40, ntimes)  # 40 points per time step
)
# Generate the data
ex1$dat <- generate_smooth_gauss_mix(
ex1$mu_function,
ex1$Sigma_function,
ex1$pi_function,
ex1$num_points
)
generate_smooth_gauss_mix_cross <- function(
mu_function,
Sigma_function,
pi_function,
times,       # A numeric vector (e.g. seq(-1, 1, by = 0.1))
num_points   # Must be the same length as times
) {
# Evaluate the functions at all time points first:
mu    <- mu_function(times)     # should be array [length(times), K, d]
Sigma <- Sigma_function(times)  # should be array [length(times), K, d(, d)]
pi    <- pi_function(times)     # should be matrix [length(times), K]
# Number of mixture components:
K <- ncol(pi)
# Dimensionality, d:
# If mu is 3D, dims are (length(times), K, d). That last dimension is the dimension 'd'.
d <- dim(mu)[3]
# Pre-allocate lists to store results:
z <- vector("list", length(times))
y <- vector("list", length(times))
biomass <- vector("list", length(times))
# Loop over each time index i
for (i in seq_along(times)) {
# Number of points to generate at this time:
n_i <- num_points[i]
# z: which mixture component each point belongs to
# rmultinom() returns a matrix with #cols = #draws, so we need to compare columns to 1.
# We'll produce an index 1..K for each draw:
z[[i]] <- apply(stats::rmultinom(n_i, 1, pi[i, ]) == 1, 2, which)
# y: the actual data (either univariate or multivariate)
y[[i]] <- matrix(NA, n_i, d)
# For demonstration, just generating random biomass data for each point:
biomass[[i]] <- abs(rnorm(n_i, mean = 0.01, sd = sqrt(0.001)))
# For each mixture component k, generate the data
for (k in 1:K) {
ii <- z[[i]] == k  # which points are in component k at time i
if (!any(ii)) next
if (d == 1) {
# Univariate normal
y[[i]][ii, ] <- stats::rnorm(
n = sum(ii),
mean = mu[i, k, ],
sd   = Sigma[i, k, , ]
)
} else {
# Multivariate normal
y[[i]][ii, ] <- mvtnorm::rmvnorm(
n = sum(ii),
mean  = mu[i, k, ],
sigma = Sigma[i, k, , ]
)
}
}
}
# Return everything plus the times for convenience
list(
y       = y,
z       = z,
mu      = mu,
Sigma   = Sigma,
pi      = pi,
biomass = biomass,
times   = times
)
}
plot_data_cross <- function(y, times) {
# If y[[1]] has columns, we grab them; otherwise default to "V1", "V2", etc.
y_label <- if (is.null(colnames(y[[1]]))) {
paste0("V", seq_len(ncol(y[[1]])))
} else {
colnames(y[[1]])
}
# If you have only one dimension, y_label might be length 1.
# Then you can do something like:
# y_label <- if (length(y_label) == 1) y_label else paste(y_label, collapse = ", ")
# Turn the list-of-matrices (or list-of-vectors) into a single data frame,
# pairing each sub-list in y with the correct time.
df <- purrr::map2_dfr(
.x = y,
.y = times,
~ {
# .x is a matrix of size (num_points[i], d)
# .y is the numeric time for that i
# We'll store them as columns in a small tibble
if (is.matrix(.x)) {
tibble::as_tibble(.x, .name_repair = "unique") %>%
dplyr::mutate(time = .y)
} else {
# If univariate, .x is a vector
tibble::tibble(V1 = .x, time = .y)
}
}
)
# Now gather the columns if you have more than 1 dimension
# so you can plot them as e.g. y-values in ggplot. For univariate,
# you can skip gather/pivot.
if (ncol(df) > 2) {
# pivot_longer all the dimension columns except `time`
df <- tidyr::pivot_longer(
df,
cols = -time,
names_to = "dimension",
values_to = "value"
)
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = value, color = dimension)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = paste(y_label, collapse = ", "), title = "Raw Data")
} else {
# Univariate case
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = V1)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = y_label, title = "Raw Data")
}
p
}
# Generate the data
ex1$dat <- generate_smooth_gauss_mix_cross(
ex1$mu_function,
ex1$Sigma_function,
ex1$pi_function,
ex1$num_points
)
# Generate the plot
plot_data_cross(ex1$dat$y, times)
ex1$dat$y
dim(ex1$dat$y)
len(ex1$dat$y)
length(ex1$dat$y)
generate_smooth_gauss_mix_cross <- function(mu_function,
Sigma_function,
pi_function,
num_points) {
times <- seq_along(num_points)
mu <- mu_function(times)
Sigma <- Sigma_function(times)
pi <- pi_function(times)
K <- ncol(pi) # number of components
d <- dim(mu)[3]
dimnames(mu) <- list(NULL, paste0("cluster", 1:K), NULL)
z <- list() # z[[t]][i] = class of point i at time t
y <- list() # y[[t]][i,] = d-vector of point i at time t
biomass <- list() # biomass[[t]] = biomass of particles in each bin at time t
for (t in times) {
z[[t]] <- apply(stats::rmultinom(num_points[t], 1, pi[t, ]) == 1, 2, which)
y[[t]] <- matrix(NA, num_points[t], d)
biomass[[t]] <- abs(rnorm(num_points[t], mean = 0.01, sd = sqrt(0.001)))
for (k in 1:K) {
ii <- z[[t]] == k # index of points in component k at time t
if (sum(ii) == 0) next
if (d == 1)
y[[t]][ii, ] <- stats::rnorm(n = sum(ii),
mean = mu[t, k, ],
sd = Sigma[t, k, , ])
else
y[[t]][ii, ] <- mvtnorm::rmvnorm(n = sum(ii),
mean = mu[t, k, ],
sigma = Sigma[t, k, , ])
}
}
list(y = y, z = z, mu = mu, Sigma = Sigma, pi = pi, biomass = biomass)
}
plot_data_cross <- function(y) {
d <- ncol(y[[1]])
y_label <- ifelse(is.null(colnames(y[[1]])), "V1", colnames(y[[1]]))
fig <- purrr::map_dfr(y, ~ tibble::tibble(y = .x), .id = "time") %>%
dplyr::mutate(time = as.numeric(.data$time)) %>%
ggplot2::ggplot(ggplot2::aes(x = .data$time, y = .data$y)) +
ggplot2::geom_point(alpha = 0.2) +
ggplot2::labs(x = "Time", y = y_label, title = "Raw Data")
return(fig)
}
# Define parameters
d <- 1
K <- 2
times <- seq(-1, 1, by = 0.1)  # Generate times from -1 to 1 at intervals of 0.1
ntimes <- length(times)
# Define the functions
ex1 <- list(
mu_function = function(times) {
mu <- array(NA, c(length(times), K, d))
mu[, 1, 1] <- times  # Mean for the first cluster is y = x
mu[, 2, 1] <- -times # Mean for the second cluster is y = -x
mu
},
Sigma_function = function(times) {
Sigma <- array(NA, c(length(times), K, 1, 1))
Sigma[, , 1, 1] <- 0.1  # Reduced variance for all clusters
Sigma
},
pi_function = function(times) {
matrix(0.5, nrow = length(times), ncol = 2)  # Constant proportions
},
num_points = rep(40, ntimes)  # 40 points per time step
)
generate_smooth_gauss_mix_cross <- function(
mu_function,
Sigma_function,
pi_function,
times,       # A numeric vector (e.g. seq(-1, 1, by = 0.1))
num_points   # Must be the same length as times
) {
# Evaluate the functions at all time points first:
mu    <- mu_function(times)     # should be array [length(times), K, d]
Sigma <- Sigma_function(times)  # should be array [length(times), K, d(, d)]
pi    <- pi_function(times)     # should be matrix [length(times), K]
# Number of mixture components:
K <- ncol(pi)
# Dimensionality, d:
# If mu is 3D, dims are (length(times), K, d). That last dimension is the dimension 'd'.
d <- dim(mu)[3]
# Pre-allocate lists to store results:
z <- vector("list", length(times))
y <- vector("list", length(times))
biomass <- vector("list", length(times))
# Loop over each time index i
for (i in seq_along(times)) {
# Number of points to generate at this time:
n_i <- num_points[i]
# z: which mixture component each point belongs to
# rmultinom() returns a matrix with #cols = #draws, so we need to compare columns to 1.
# We'll produce an index 1..K for each draw:
z[[i]] <- apply(stats::rmultinom(n_i, 1, pi[i, ]) == 1, 2, which)
# y: the actual data (either univariate or multivariate)
y[[i]] <- matrix(NA, n_i, d)
# For demonstration, just generating random biomass data for each point:
biomass[[i]] <- abs(rnorm(n_i, mean = 0.01, sd = sqrt(0.001)))
# For each mixture component k, generate the data
for (k in 1:K) {
ii <- z[[i]] == k  # which points are in component k at time i
if (!any(ii)) next
if (d == 1) {
# Univariate normal
y[[i]][ii, ] <- stats::rnorm(
n = sum(ii),
mean = mu[i, k, ],
sd   = Sigma[i, k, , ]
)
} else {
# Multivariate normal
y[[i]][ii, ] <- mvtnorm::rmvnorm(
n = sum(ii),
mean  = mu[i, k, ],
sigma = Sigma[i, k, , ]
)
}
}
}
# Return everything plus the times for convenience
list(
y       = y,
z       = z,
mu      = mu,
Sigma   = Sigma,
pi      = pi,
biomass = biomass,
times   = times
)
}
plot_data_cross <- function(y, times) {
# If y[[1]] has columns, we grab them; otherwise default to "V1", "V2", etc.
y_label <- if (is.null(colnames(y[[1]]))) {
paste0("V", seq_len(ncol(y[[1]])))
} else {
colnames(y[[1]])
}
# If you have only one dimension, y_label might be length 1.
# Then you can do something like:
# y_label <- if (length(y_label) == 1) y_label else paste(y_label, collapse = ", ")
# Turn the list-of-matrices (or list-of-vectors) into a single data frame,
# pairing each sub-list in y with the correct time.
df <- purrr::map2_dfr(
.x = y,
.y = times,
~ {
# .x is a matrix of size (num_points[i], d)
# .y is the numeric time for that i
# We'll store them as columns in a small tibble
if (is.matrix(.x)) {
tibble::as_tibble(.x, .name_repair = "unique") %>%
dplyr::mutate(time = .y)
} else {
# If univariate, .x is a vector
tibble::tibble(V1 = .x, time = .y)
}
}
)
# Now gather the columns if you have more than 1 dimension
# so you can plot them as e.g. y-values in ggplot. For univariate,
# you can skip gather/pivot.
if (ncol(df) > 2) {
# pivot_longer all the dimension columns except `time`
df <- tidyr::pivot_longer(
df,
cols = -time,
names_to = "dimension",
values_to = "value"
)
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = value, color = dimension)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = paste(y_label, collapse = ", "), title = "Raw Data")
} else {
# Univariate case
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = V1)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = y_label, title = "Raw Data")
}
p
}
# Generate the data
ex1$dat <- generate_smooth_gauss_mix_cross(
ex1$mu_function,
ex1$Sigma_function,
ex1$pi_function,
ex1$num_points
)
generate_smooth_gauss_mix_cross <- function(
mu_function,
Sigma_function,
pi_function,
times,       # A numeric vector (e.g. seq(-1, 1, by = 0.1))
num_points = rep(40, ntimes)   # Must be the same length as times
) {
# Evaluate the functions at all time points first:
mu    <- mu_function(times)     # should be array [length(times), K, d]
Sigma <- Sigma_function(times)  # should be array [length(times), K, d(, d)]
pi    <- pi_function(times)     # should be matrix [length(times), K]
# Number of mixture components:
K <- ncol(pi)
# Dimensionality, d:
# If mu is 3D, dims are (length(times), K, d). That last dimension is the dimension 'd'.
d <- dim(mu)[3]
# Pre-allocate lists to store results:
z <- vector("list", length(times))
y <- vector("list", length(times))
biomass <- vector("list", length(times))
# Loop over each time index i
for (i in seq_along(times)) {
# Number of points to generate at this time:
n_i <- num_points[i]
# z: which mixture component each point belongs to
# rmultinom() returns a matrix with #cols = #draws, so we need to compare columns to 1.
# We'll produce an index 1..K for each draw:
z[[i]] <- apply(stats::rmultinom(n_i, 1, pi[i, ]) == 1, 2, which)
# y: the actual data (either univariate or multivariate)
y[[i]] <- matrix(NA, n_i, d)
# For demonstration, just generating random biomass data for each point:
biomass[[i]] <- abs(rnorm(n_i, mean = 0.01, sd = sqrt(0.001)))
# For each mixture component k, generate the data
for (k in 1:K) {
ii <- z[[i]] == k  # which points are in component k at time i
if (!any(ii)) next
if (d == 1) {
# Univariate normal
y[[i]][ii, ] <- stats::rnorm(
n = sum(ii),
mean = mu[i, k, ],
sd   = Sigma[i, k, , ]
)
} else {
# Multivariate normal
y[[i]][ii, ] <- mvtnorm::rmvnorm(
n = sum(ii),
mean  = mu[i, k, ],
sigma = Sigma[i, k, , ]
)
}
}
}
# Return everything plus the times for convenience
list(
y       = y,
z       = z,
mu      = mu,
Sigma   = Sigma,
pi      = pi,
biomass = biomass,
times   = times
)
}
plot_data_cross <- function(y, times) {
# If y[[1]] has columns, we grab them; otherwise default to "V1", "V2", etc.
y_label <- if (is.null(colnames(y[[1]]))) {
paste0("V", seq_len(ncol(y[[1]])))
} else {
colnames(y[[1]])
}
# If you have only one dimension, y_label might be length 1.
# Then you can do something like:
# y_label <- if (length(y_label) == 1) y_label else paste(y_label, collapse = ", ")
# Turn the list-of-matrices (or list-of-vectors) into a single data frame,
# pairing each sub-list in y with the correct time.
df <- purrr::map2_dfr(
.x = y,
.y = times,
~ {
# .x is a matrix of size (num_points[i], d)
# .y is the numeric time for that i
# We'll store them as columns in a small tibble
if (is.matrix(.x)) {
tibble::as_tibble(.x, .name_repair = "unique") %>%
dplyr::mutate(time = .y)
} else {
# If univariate, .x is a vector
tibble::tibble(V1 = .x, time = .y)
}
}
)
# Now gather the columns if you have more than 1 dimension
# so you can plot them as e.g. y-values in ggplot. For univariate,
# you can skip gather/pivot.
if (ncol(df) > 2) {
# pivot_longer all the dimension columns except `time`
df <- tidyr::pivot_longer(
df,
cols = -time,
names_to = "dimension",
values_to = "value"
)
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = value, color = dimension)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = paste(y_label, collapse = ", "), title = "Raw Data")
} else {
# Univariate case
p <- ggplot2::ggplot(df, ggplot2::aes(x = time, y = V1)) +
ggplot2::geom_point(alpha = 0.4) +
ggplot2::labs(x = "Time", y = y_label, title = "Raw Data")
}
p
}
# Generate the data
ex1$dat <- generate_smooth_gauss_mix_cross(
ex1$mu_function,
ex1$Sigma_function,
ex1$pi_function,
ex1$num_points
)
# Generate the plot
plot_data_cross(ex1$dat$y, times)
?median
?as.POSIXct
setwd("C:/Desktop Folders/USC/Academic/Research/flowkernel-project/create-flowkernel")
remotes::install_github("jacobbien/litr-project", subdir = "litr")
litr::render("create-flowkernel/index.Rmd")
cd ..
pwd
setwd("C:/Desktop Folders/USC/Academic/Research/flowkernel-project")
litr::render("create-flowkernel/index.Rmd")
litr::render("create-flowkernel/index.Rmd")
